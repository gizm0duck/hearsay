exit
   23:         }
   22:           status: response.status,
   21:           header: response.header,
response_data = {
request_data
exit
request.controller_instance.hearsay_attributes
request.controller_instance
request.public_methods
@controller
request
request.controller
exit
payload
payload.to_json
payload
exit
Hearsay::Transaction.id
            }
              response: response
              uuid: event.payload[:uuid],
              client_ip: event.payload[:client_ip],
              server_ip: event.payload[:server_ip],
              db_runtime: event.payload[:db_runtime],
              view_runtime: event.payload[:view_runtime],
              status: event.payload[:status],
              path: event.payload[:path],
              method: event.payload[:method],
              format: event.payload[:format],
              params: event.payload[:params],
              action: event.payload[:action],
              controller: event.payload[:controller],
              headers: headers_out.reject!{|k,v| !(k==k.upcase)},
              hearsay_id: Hearsay::Transaction.id,
payload = {
            }
              response: response
              uuid: event.payload[:uuid],
              client_ip: event.payload[:client_ip],
              server_ip: event.payload[:server_ip],
              db_runtime: event.payload[:db_runtime],
              view_runtime: event.payload[:view_runtime],
              status: event.payload[:status],
              path: event.payload[:path],
              method: event.payload[:method],
              format: event.payload[:format],
              params: event.payload[:params],
              action: event.payload[:action],
              controller: event.payload[:controller],
              headers: headers_out.reject!{|k,v| !(k==k.upcase)},
              hearsay_id: Hearsay::Transaction.id,
            }payload = {
              response: response
              uuid: event.payload[:uuid],
              client_ip: event.payload[:client_ip],
              server_ip: event.payload[:server_ip],
              db_runtime: event.payload[:db_runtime],
              view_runtime: event.payload[:view_runtime],
              status: event.payload[:status],
              path: event.payload[:path],
              method: event.payload[:method],
              format: event.payload[:format],
              params: event.payload[:params],
              action: event.payload[:action],
              controller: event.payload[:controller],
              headers: headers_out.reject!{|k,v| !(k==k.upcase)},
              hearsay_id: Hearsay::Transaction.id,
payload = {
event.payload[:response]
event.payload.keys
headers_out
payload_out
payload
exit
Hearsay::Transaction.id
exit
headers_out
Hearsay::Transaction.id
exit
headers_out
exit
headers_out
exit
event.payload
event.payload[:server_ip]
event.payload[:uuid]
event.payload[:client_ip]
event.payload[:response]
payload[:response]
exit
headers_out
event.payload[:headers].instance_variable_get(:@req).env.keys
event.payload[:headers].instance_variable_get(:@req).env["action_dispatch.remote_ip"].calculate_ip
event.payload[:headers].instance_variable_get(:@req).env["action_dispatch.remote_ip"].calculate_up
event.payload[:headers].instance_variable_get(:@req).env["action_dispatch.remote_ip"].to_s
event.payload[:headers].instance_variable_get(:@req).env["action_dispatch.remote_ip"].public_methods false
event.payload[:headers].instance_variable_get(:@req).env["action_dispatch.remote_ip"].class
event.payload[:headers].instance_variable_get(:@req).env["action_dispatch.remote_ip"]
event.payload
dispatch_cookies.keys
dispay_cookies.keys
dispatch_cookies = Hash[*dispatch_cookies_out.sort.flatten]
Hash[*dispatch_cookies_out.sort.flatten]di
dispatch_cookies_out = event.payload[:headers]["action_dispatch.cookies"].reject{|k, v| !(String === v || Integer === v || Hash === v || Array === v) }
dispatch_cookies_out
event
headers_out.reject!{|k,v| !(k==k.upcase)}
headers_out = event.payload[:headers].instance_variable_get(:@req).env.reject{|k, v| !(String === v || Integer === v || Hash === v || Array === v) }
headers_out.reject!{|k,v| !(k==k.upcase)}
headers
headers.to_json
headers
headers = event.payload[:headers].instance_variable_get(:@req).env.reject{|k, v| !(String === v || Integer === v || Hash === v || Array === v) }
event.payload[:headers].instance_variable_get(:@req).env.keys.sort
event.payload[:headers].instance_variable_get(:@req).env["HTTP_COOKIE"]
event.payload[:headers].instance_variable_get(:@req).env.keys.sort
event.payload[:headers].instance_variable_get(:@req).env.keys
event.payload.keys
event.payload[:headers]["cookies"]
event.payload
event.payload[:cookies].reject{|k, v| !(String === v || Integer === v || Hash === v ||
event.payload[:cookies]
event.payload[:headers]["action_dispatch.cookies"].reject{|k, v| !(String === v || Integer === v || Hash === v || Array === v) }
event.payload[:headers]["action_dispatch.cookies"]
event.payload[:headers].instance_variable_get(:@req).env.reject{|k, v| !(String === v || Integer === v || Hash === v || Array === v) }.to_json
event.payload[:headers].instance_variable_get(:@req).env.reject{|k, v| !(String === v || Integer === v || Hash === v || Array === v) }
event.payload[:headers].instance_variable_get(:@req).env.to_json
event.payload[:headers].instance_variable_get(:@req).env.class
event.payload[:headers].instance_variable_get(:@req).env.keys
event.payload[:headers].instance_variable_get(:@req).env
event.payload[:headers].instance_variable_get(:@req)
event.payload[:headers]
event.payload[:params]
event.payload[:controller]
event.payload[:status]
event.payload[:path]
event.payload[:method]
event.payload[:format]
event.payload.keys
event.payload[:headers].class
event.payload[:headers].to_json
event.payload[:headers].instance_variables
event.payload[:headers].instance_variable_get(:@req)
event.payload[:headers].req
event.payload[:headers].re
event.payload[:headers]
event.payload[:headers].keys
event.payload[:headers]
event.payload[:params]
event.payload.keys
event.payload
event.controller_name
event
event.name
exit
event.name
Hearsay::Subscriber::ActiveRecord.subscribers_by_events.keys
Subscribers::Cat
Hearsay::Subscriber::ActiveRecord.subscribers_by_events.keys
event.name
